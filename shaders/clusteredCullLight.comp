#version 450

#extension GL_EXT_nonuniform_qualifier : enable

layout (binding = 0) uniform ComputeClusteredUniformBufferObject {
    mat4    view;
    mat4    proj;
    mat4    projInverse;
    vec2    screenDimensions;
    uint    tileSizePx;
} ubo;

struct ClusterGrid
{
    vec3	minPosition;
    uint    minPos_padding;
    vec3	maxPosition;
    uint    maxPos_padding;
};
layout(std140, binding = 1)readonly buffer ClusterGridBlock 
{
    ClusterGrid clusterGrids[];
};

struct LightObject
{
    vec3	position;
    uint    position_padding;
    vec3	color;
    uint    color_padding;
    float	intensity;
    float   radius;
};
layout(std140, binding = 2) readonly buffer GlobalLightSSBO {
   LightObject globalLights[ ];
};

// LightIndex
layout(std140, binding = 3) buffer LightIndexSSBO {
   uint lightIndexList[ ];
};

struct LightGrid
{
    uint offset;
    uint size;
};
layout(std140, binding = 4) buffer LightGridSSBO {
   LightGrid lightGrids[ ];
};

layout (std430, binding = 5) buffer GlobalIndexCountSSBO{
    uint globalIndexCount;
};

layout(std140, binding = 6) buffer GlobalLight_DEBUG_SSBO {
   LightObject globalLights_debug[ ];
};

//Shared variables 
// shared LightObject sharedLights[16*9*1];

// Dispatch (1, 1, 8)
layout (local_size_x = 16, local_size_y = 9, local_size_z = 2) in;

bool testSphereAABB(uint light, uint tile);
float sqDistPointAABB(vec3 point, uint tile);

const uint MAX_LIGHT_PER_GRID = 400;

void main()
{
    // TODO: bug that globalIndexCount 
    // did not get reset between work group
    // Due to amount of work in each workgroup which help
    // other workgroup not to interleave and overwrite the same offset.    
    globalIndexCount = 0;
    
    uint tileIndex = gl_LocalInvocationIndex + gl_WorkGroupID.z * (gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z);

    uint lightCount  = globalLights.length();
    
    uint visibleLightCount = 0;
    uint visibleLightIndices[MAX_LIGHT_PER_GRID];

    for(int lightIndex = 0; lightIndex < lightCount; ++lightIndex)
    {
        // Maximum light per cluster = 99
        if( testSphereAABB(lightIndex, tileIndex) && visibleLightCount < MAX_LIGHT_PER_GRID)
        {
            visibleLightIndices[visibleLightCount] = lightIndex;
            visibleLightCount += 1;
        }

        globalLights_debug[lightIndex].position = (ubo.view * vec4(globalLights[lightIndex].position, 1.0)).xyz;
    }

    barrier();
    uint offset = atomicAdd(globalIndexCount, visibleLightCount);
    for(uint i = 0; i < visibleLightCount; ++i)
    {
        lightIndexList[offset + i] = visibleLightIndices[i];
    }
    
    lightGrids[tileIndex].offset = offset;
    lightGrids[tileIndex].size = visibleLightCount;
}

//Checking for intersection given a cluster AABB and a light volume
bool testSphereAABB(uint light, uint tile){
    float radius = globalLights[light].radius;
    vec3 center  = (ubo.view * vec4(globalLights[light].position, 1.0)).xyz;
    // center.z = -center.z;
    float squaredDistance = sqDistPointAABB(center, tile);

    // return squaredDistance <= (radius * radius) + radius *0.1;
    return squaredDistance <= (radius * radius);
}

float sqDistPointAABB(vec3 point, uint tile)
{
    float sqDist = 0.0;
    ClusterGrid currentCell = clusterGrids[tile];
    for(int i = 0; i < 3; ++i)
    {
        float v = point[i];
        if(v < currentCell.minPosition[i])
        {
            sqDist += (currentCell.minPosition[i] - v) * (currentCell.minPosition[i] - v);
        }
        if(v > currentCell.maxPosition[i])
        {
            sqDist += (v - currentCell.maxPosition[i]) * (v - currentCell.maxPosition[i]);
        }
    }   
    return sqDist;
}
