#version 450

#extension GL_EXT_nonuniform_qualifier : enable

layout (binding = 0) uniform ComputeClusteredUniformBufferObject {
    mat4    view;
    mat4    proj;
    mat4    projInverse;
    vec2    screenDimensions;
    // uint    tileSizePx; 
    // can be calculate 
    // tileSizePx = screenDimensions / gl_NumWorkGroups.x 
} ubo;

struct ClusterPlane
{
    float	zNear;
    uint    zNear_padding;
    float	zFar;
    uint    zFar_padding;
};
layout(std140, binding = 1) readonly buffer ClusterPlaneBlock 
{
    ClusterPlane clusterPlanes[];
    // access by using 
    // this invocation planes = clusterPlanes[gl_WorkGroupID.z]
};

struct ClusterGrid
{
    vec3	minPosition;
    float    minPos_padding;
    vec3	maxPosition;
    float    maxPos_padding;
};
layout(std140, binding = 2) buffer ClusterGridBlock 
{
    ClusterGrid clusterGrids[];
};

/*
struct ClusterGridDebug
{
    vec3	 leftTopFront;
    float    leftTopFront_padding;
    vec3	 rigthTopFront;
    float    rigthTopFront_padding;
    vec3	 leftBottomFront;
    float    leftBottomFront_padding;
    vec3	 rightBottomFront;
    float    rightBottomFront_padding;
    vec3	 leftTopBack;
    float    leftTopBack_padding;
    vec3	 rigthTopBack;
    float    rigthTopBack_padding;
    vec3	 leftBottomBack;
    float    leftBottomBack_padding;
    vec3	 rightBottomBack;
    float    rightBottomBack_padding;
};
layout(std140, binding = 3) buffer ClusterGridBlockDebug 
{
    ClusterGridDebug clusterGridsDebug[];
};
*/

// include helper function
#include "clusteredGridFunc.glsl"

// layout (local_size_x = 16, local_size_y = 9, local_size_z = 32) in;

void main()
{
    //Eye position is zero in view space
    const vec3 eyePos = vec3(0.0);

    //Per cluster variables
    uint tileSizeX = uint(ubo.screenDimensions.x) / gl_NumWorkGroups.x;
    uint tileSizeY = uint(ubo.screenDimensions.y) / gl_NumWorkGroups.y;
    uint tileIndex   = gl_WorkGroupID.x +
                        gl_WorkGroupID.y * gl_NumWorkGroups.x +
                        gl_WorkGroupID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y);

    //Calculating the min and max point in screen space (Tile)
    // Top Right
    vec4 maxPointScreenS = vec4((gl_WorkGroupID.x + 1) * tileSizeX,
                                (gl_WorkGroupID.y + 1) * tileSizeY,
                                0.0, 1.0); 
    // Bottom left
    vec4 minPointScreenS = vec4(gl_WorkGroupID.x * tileSizeX,
                                gl_WorkGroupID.y * tileSizeY,
                                0.0, 1.0); 

    //Pass min and max to view space
    vec3 maxPointViewS = screenToView(maxPointScreenS, ubo.screenDimensions, ubo.projInverse).xyz;
    vec3 minPointViewS = screenToView(minPointScreenS, ubo.screenDimensions, ubo.projInverse).xyz;

    float tileNear = clusterPlanes[gl_WorkGroupID.z].zNear;
    float tileFar = clusterPlanes[gl_WorkGroupID.z].zFar;

    //Finding the 4 intersection points made from each point to the cluster near/far plane
    vec3 minPointNear = lineIntersectionToZPlane(eyePos, minPointViewS, tileNear);
    vec3 minPointFar  = lineIntersectionToZPlane(eyePos, minPointViewS, tileFar);
    vec3 maxPointNear = lineIntersectionToZPlane(eyePos, maxPointViewS, tileNear);
    vec3 maxPointFar  = lineIntersectionToZPlane(eyePos, maxPointViewS, tileFar);

    vec3 minPointAABB;
    vec3 maxPointAABB;

    minPointAABB = min(min(minPointNear, minPointFar),min(maxPointNear, maxPointFar));
    maxPointAABB = max(max(minPointNear, minPointFar),max(maxPointNear, maxPointFar));

    clusterGrids[tileIndex].minPosition = minPointAABB;
    clusterGrids[tileIndex].maxPosition = maxPointAABB;
}